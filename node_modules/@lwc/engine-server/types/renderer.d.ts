import { HostNode, HostElement } from './types';
declare function createElement(name: string): HostElement;
export declare const ssr: boolean;
export declare function setIsHydrating(_value: boolean): void;
export declare function isHydrating(): boolean;
export declare const isNativeShadowDefined: boolean;
export declare const isSyntheticShadowDefined: boolean;
declare type N = HostNode;
declare type E = HostElement;
export declare function insert(node: N, parent: E, anchor: N | null): void;
export declare function remove(node: N, parent: E): void;
export { createElement };
export declare function createText(content: string): HostNode;
export declare function createComment(content: string): HostNode;
export declare function nextSibling(node: N): HostNode | null;
export declare function attachShadow(element: E, config: ShadowRootInit): any;
export declare function getProperty(node: N, key: string): any;
export declare function setProperty(node: N, key: string, value: any): void;
export declare function setText(node: N, content: string): void;
export declare function getAttribute(element: E, name: string, namespace?: string | null): string | null;
export declare function setAttribute(element: E, name: string, value: string, namespace?: string | null): void;
export declare function removeAttribute(element: E, name: string, namespace?: string | null): void;
export declare function getClassList(element: E): DOMTokenList;
export declare function setCSSStyleProperty(element: E, name: string, value: string, important: boolean): void;
export declare function isConnected(node: HostNode): boolean;
export declare const insertGlobalStylesheet: (content: string) => void;
export declare const insertStylesheet: (content: string, target: any) => void;
export declare const addEventListener: (target: HostNode, type: string, callback: EventListener, options?: boolean | AddEventListenerOptions | undefined) => void;
export declare const removeEventListener: (target: HostNode, type: string, callback: EventListener, options?: boolean | AddEventListenerOptions | undefined) => void;
export declare const dispatchEvent: (target: any, event: Event) => boolean;
export declare const getBoundingClientRect: (element: HostElement) => DOMRect;
export declare const querySelector: (element: HostElement, selectors: string) => Element | null;
export declare const querySelectorAll: (element: HostElement, selectors: string) => NodeList;
export declare const getElementsByTagName: (element: HostElement, tagNameOrWildCard: string) => HTMLCollection;
export declare const getElementsByClassName: (element: HostElement, names: string) => HTMLCollection;
export declare const getChildren: (element: HostElement) => HTMLCollection;
export declare const getChildNodes: (element: HostElement) => NodeList;
export declare const getFirstChild: (element: HostElement) => HostNode | null;
export declare const getFirstElementChild: (element: HostElement) => HostElement | null;
export declare const getLastChild: (element: HostElement) => HostNode | null;
export declare const getLastElementChild: (element: HostElement) => HostElement | null;
export declare function defineCustomElement(name: string, constructor: CustomElementConstructor, _options?: ElementDefinitionOptions): void;
export declare function getCustomElement(name: string): CustomElementConstructor | undefined;
declare const HTMLElementExported: {
    new (): HTMLElement;
    prototype: HTMLElement;
};
export { HTMLElementExported as HTMLElement };
export declare const assertInstanceOfHTMLElement: (elm: any, msg: string) => void;
